package server

import (
	"encoding/json"
	"fmt"
	"gocrud/database"
	"io/ioutil"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

type user struct {
	ID    uint32 `json:"id"`
	Name  string `json:"name"`
	Email string `json:"email"`
}

// CreateUser inserts a user in the database
func CreateUser(w http.ResponseWriter, r *http.Request) {
	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		w.Write([]byte("Failed to read request body"))
		return
	}

	var user user
	if err = json.Unmarshal(reqBody, &user); err != nil {
		w.Write([]byte("Error while converting user to struct"))
		return
	}

	fmt.Println(user)

	database, err := database.Connect()
	if err != nil {
		w.Write([]byte("Error while connecting to database"))
		return
	}
	defer database.Close()

	// Prepare creates a prepared statement for later queries or executions.
	// Multiple queries or executions may be run concurrently from the returned
	// statement. The caller must call the statement's Close method when the
	// statement is no longer needed.
	statement, err := database.Prepare("insert into users (name, email) values (?, ?)")
	if err != nil {
		w.Write([]byte("Error while creating statement"))
		return
	}
	defer statement.Close()

	// Exec executes a query that doesn't return rows.
	insertion, err := statement.Exec(user.Name, user.Email)
	if err != nil {
		w.Write([]byte("Error while executing statement"))
		return
	}

	// LastInsertId returns the integer generated by the database
	// in response to a command. Typically this will be from an
	// "auto increment" column when inserting a new row. Not all
	// databases support this feature, and the syntax of such
	// statements varies.
	idInserted, err := insertion.LastInsertId()
	if err != nil {
		w.Write([]byte("Error while obtaining inserted id"))
		return
	}

	w.WriteHeader(http.StatusCreated)
	w.Write([]byte(fmt.Sprintf("User inserted with success! ID: %d", idInserted)))
}

// SearchUsers searches all users from database
func SearchUsers(w http.ResponseWriter, r *http.Request) {
	database, err := database.Connect()
	if err != nil {
		w.Write([]byte("Error while connecting to database"))
		return
	}
	defer database.Close()

	lines, err := database.Query("select * from users")
	if err != nil {
		w.Write([]byte("Error while searching users in database"))
		return
	}
	defer lines.Close()

	var users []user
	for lines.Next() {
		var user user
		if err := lines.Scan(&user.ID, &user.Name, &user.Email); err != nil {
			w.Write([]byte("Error while scanning user"))
			return
		}
		users = append(users, user)
	}

	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(users); err != nil {
		w.Write([]byte("Error while converting users to json"))
		return
	}
}

// SearchUser searches a specified user from database
func SearchUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)

	ID, err := strconv.ParseUint(params["id"], 10, 32)
	if err != nil {
		w.Write([]byte("Error while converting params to int"))
		return
	}

	database, err := database.Connect()
	if err != nil {
		w.Write([]byte("Error while connecting to database"))
		return
	}

	line, err := database.Query("select * from users where id = ?", ID)
	if err != nil {
		w.Write([]byte("Error while searching user"))
		return
	}

	var user user
	if line.Next() {
		if err := line.Scan(&user.ID, &user.Name, &user.Email); err != nil {
			w.Write([]byte("Error while scanning user"))
			return
		}
	}

	w.WriteHeader(http.StatusOK)
	if err := json.NewEncoder(w).Encode(user); err != nil {
		w.Write([]byte("Error while converting user to json"))
		return
	}
}

// UpdateUser updates a specified user from database
func UpdateUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)

	ID, err := strconv.ParseUint(params["id"], 10, 32)
	if err != nil {
		w.Write([]byte("Error while converting param to int"))
		return
	}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		w.Write([]byte("Error while reading request body"))
		return
	}

	var user user
	if err = json.Unmarshal(reqBody, &user); err != nil {
		w.Write([]byte("Error while converting user to struct"))
		return
	}

	database, err := database.Connect()
	if err != nil {
		w.Write([]byte("Error while connecting to database"))
		return
	}
	defer database.Close()

	statement, err := database.Prepare("update users set name = ?, email = ? where id = ?")
	if err != nil {
		w.Write([]byte("Error while creating statement"))
		return
	}
	defer statement.Close()

	if _, err := statement.Exec(user.Name, user.Email, ID); err != nil {
		w.Write([]byte("Error while updateing user"))
		return
	}

	w.WriteHeader(http.StatusNoContent)
}

// DeleteUser deletes a user from the database
func DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)

	ID, err := strconv.ParseUint(params["id"], 10, 32)
	if err != nil {
		w.Write([]byte("Error while converting param to int"))
		return
	}

	database, err := database.Connect()
	if err != nil {
		w.Write([]byte("Error while connecting to database"))
		return
	}
	defer database.Close()

	statement, err := database.Prepare("delete from users where id = ?")
	if err != nil {
		w.Write([]byte("Error while creating statement"))
		return
	}
	defer statement.Close()

	if _, err := statement.Exec(ID); err != nil {
		w.Write([]byte("Error while deleting user"))
		return
	}

	w.WriteHeader(http.StatusNoContent)
}
